// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTodoItems(t *testing.T) {
	t.Parallel()

	query := TodoItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTodoItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoItem{}
	if err = randomize.Struct(seed, o, todoItemDBTypes, true, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TodoItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTodoItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoItem{}
	if err = randomize.Struct(seed, o, todoItemDBTypes, true, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TodoItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TodoItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTodoItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoItem{}
	if err = randomize.Struct(seed, o, todoItemDBTypes, true, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TodoItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TodoItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTodoItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoItem{}
	if err = randomize.Struct(seed, o, todoItemDBTypes, true, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TodoItemExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TodoItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TodoItemExists to return true, but got false.")
	}
}

func testTodoItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoItem{}
	if err = randomize.Struct(seed, o, todoItemDBTypes, true, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	todoItemFound, err := FindTodoItem(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if todoItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTodoItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoItem{}
	if err = randomize.Struct(seed, o, todoItemDBTypes, true, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TodoItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTodoItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoItem{}
	if err = randomize.Struct(seed, o, todoItemDBTypes, true, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TodoItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTodoItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	todoItemOne := &TodoItem{}
	todoItemTwo := &TodoItem{}
	if err = randomize.Struct(seed, todoItemOne, todoItemDBTypes, false, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}
	if err = randomize.Struct(seed, todoItemTwo, todoItemDBTypes, false, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = todoItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = todoItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TodoItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTodoItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	todoItemOne := &TodoItem{}
	todoItemTwo := &TodoItem{}
	if err = randomize.Struct(seed, todoItemOne, todoItemDBTypes, false, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}
	if err = randomize.Struct(seed, todoItemTwo, todoItemDBTypes, false, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = todoItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = todoItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodoItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func todoItemBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TodoItem) error {
	*o = TodoItem{}
	return nil
}

func todoItemAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TodoItem) error {
	*o = TodoItem{}
	return nil
}

func todoItemAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TodoItem) error {
	*o = TodoItem{}
	return nil
}

func todoItemBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TodoItem) error {
	*o = TodoItem{}
	return nil
}

func todoItemAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TodoItem) error {
	*o = TodoItem{}
	return nil
}

func todoItemBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TodoItem) error {
	*o = TodoItem{}
	return nil
}

func todoItemAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TodoItem) error {
	*o = TodoItem{}
	return nil
}

func todoItemBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TodoItem) error {
	*o = TodoItem{}
	return nil
}

func todoItemAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TodoItem) error {
	*o = TodoItem{}
	return nil
}

func testTodoItemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TodoItem{}
	o := &TodoItem{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, todoItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TodoItem object: %s", err)
	}

	AddTodoItemHook(boil.BeforeInsertHook, todoItemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	todoItemBeforeInsertHooks = []TodoItemHook{}

	AddTodoItemHook(boil.AfterInsertHook, todoItemAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	todoItemAfterInsertHooks = []TodoItemHook{}

	AddTodoItemHook(boil.AfterSelectHook, todoItemAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	todoItemAfterSelectHooks = []TodoItemHook{}

	AddTodoItemHook(boil.BeforeUpdateHook, todoItemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	todoItemBeforeUpdateHooks = []TodoItemHook{}

	AddTodoItemHook(boil.AfterUpdateHook, todoItemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	todoItemAfterUpdateHooks = []TodoItemHook{}

	AddTodoItemHook(boil.BeforeDeleteHook, todoItemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	todoItemBeforeDeleteHooks = []TodoItemHook{}

	AddTodoItemHook(boil.AfterDeleteHook, todoItemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	todoItemAfterDeleteHooks = []TodoItemHook{}

	AddTodoItemHook(boil.BeforeUpsertHook, todoItemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	todoItemBeforeUpsertHooks = []TodoItemHook{}

	AddTodoItemHook(boil.AfterUpsertHook, todoItemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	todoItemAfterUpsertHooks = []TodoItemHook{}
}

func testTodoItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoItem{}
	if err = randomize.Struct(seed, o, todoItemDBTypes, true, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodoItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTodoItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoItem{}
	if err = randomize.Struct(seed, o, todoItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(todoItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TodoItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTodoItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoItem{}
	if err = randomize.Struct(seed, o, todoItemDBTypes, true, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTodoItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoItem{}
	if err = randomize.Struct(seed, o, todoItemDBTypes, true, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TodoItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTodoItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TodoItem{}
	if err = randomize.Struct(seed, o, todoItemDBTypes, true, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TodoItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	todoItemDBTypes = map[string]string{`ID`: `uuid`, `Description`: `character varying`, `DueDate`: `time without time zone`, `FileID`: `character varying`}
	_               = bytes.MinRead
)

func testTodoItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(todoItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(todoItemAllColumns) == len(todoItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TodoItem{}
	if err = randomize.Struct(seed, o, todoItemDBTypes, true, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodoItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, todoItemDBTypes, true, todoItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTodoItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(todoItemAllColumns) == len(todoItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TodoItem{}
	if err = randomize.Struct(seed, o, todoItemDBTypes, true, todoItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TodoItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, todoItemDBTypes, true, todoItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(todoItemAllColumns, todoItemPrimaryKeyColumns) {
		fields = todoItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			todoItemAllColumns,
			todoItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TodoItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTodoItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(todoItemAllColumns) == len(todoItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TodoItem{}
	if err = randomize.Struct(seed, &o, todoItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TodoItem: %s", err)
	}

	count, err := TodoItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, todoItemDBTypes, false, todoItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TodoItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TodoItem: %s", err)
	}

	count, err = TodoItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
