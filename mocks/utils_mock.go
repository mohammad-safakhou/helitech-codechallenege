// Code generated by MockGen. DO NOT EDIT.
// Source: utils/database.go
//
// Generated by this command:
//
//	mockgen -source=utils/database.go -destination=mocks/utils_mock.go -package=mocks DbTransaction
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDbTransaction is a mock of DbTransaction interface.
type MockDbTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockDbTransactionMockRecorder
}

// MockDbTransactionMockRecorder is the mock recorder for MockDbTransaction.
type MockDbTransactionMockRecorder struct {
	mock *MockDbTransaction
}

// NewMockDbTransaction creates a new mock instance.
func NewMockDbTransaction(ctrl *gomock.Controller) *MockDbTransaction {
	mock := &MockDbTransaction{ctrl: ctrl}
	mock.recorder = &MockDbTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbTransaction) EXPECT() *MockDbTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockDbTransaction) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDbTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDbTransaction)(nil).Commit))
}

// Rollback mocks base method.
func (m *MockDbTransaction) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockDbTransactionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDbTransaction)(nil).Rollback))
}
