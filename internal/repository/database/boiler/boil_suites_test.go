// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("TodoItems", testTodoItems)
}

func TestSoftDelete(t *testing.T) {}

func TestQuerySoftDeleteAll(t *testing.T) {}

func TestSliceSoftDeleteAll(t *testing.T) {}

func TestDelete(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("TodoItems", testTodoItemsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("TodoItems", testTodoItemsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("TodoItems", testTodoItemsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("TodoItems", testTodoItemsExists)
}

func TestFind(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("TodoItems", testTodoItemsFind)
}

func TestBind(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("TodoItems", testTodoItemsBind)
}

func TestOne(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("TodoItems", testTodoItemsOne)
}

func TestAll(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("TodoItems", testTodoItemsAll)
}

func TestCount(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("TodoItems", testTodoItemsCount)
}

func TestHooks(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("TodoItems", testTodoItemsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("TodoItems", testTodoItemsInsert)
	t.Run("TodoItems", testTodoItemsInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("TodoItems", testTodoItemsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("TodoItems", testTodoItemsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("TodoItems", testTodoItemsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("TodoItems", testTodoItemsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("TodoItems", testTodoItemsSliceUpdateAll)
}
